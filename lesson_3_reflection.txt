When would you want to use a remote repository rather than keeping all your work
local?
    It is very useful when your work machine is not always with you or you or someone else work through different machines.
    At that time remote repository can be very much in handy rather than carrying a backup of work alongwith.

Why might you want to always pull changes manually rather than having Git
automatically stay up-to-date with your remote repository?

    Changes done in remote repository can cause problems or conflicts which you might want to avoid. Instead you may want to
    pull changes manually which are actually desirable to you.

Describe the differences between forks, clones, and branches.  When would you
use one instead of another?
    
    Fork is similar to clones. 
    Clone applies to making copy locally while fork applies to making copy remotely on GitHub or other VCS.
    Branches are totally different from fork or clone. You use branches when you want to add changes retaining previous
    changes like while adding a new feature.
    You use clone when you want to make a remote or local repository copy locally. 
    Fork is used when you don't have permissions to make changes to some repository but at the same time you want
    to try out modifying it or reusing it.
    
    

What is the benefit of having a copy of the last known state of the remote
stored locally?
    
    Having a copy of last known state enables us to offline check how does the remote files differ from local files.
    
How would you collaborate without using Git or GitHub?  What would be easier,
and what would be harder?

    Collaborating projects without using Git or GitHub is unimaginable. They provide best features of all the best VCS.
   

When would you want to make changes in a separate branch rather than directly in
master?  What benefits does each approach have?

    When you want to modify or add some functionality to the existing working code but you want to be sure that you
    have the code all set and reviewed without bugs with your collaborators, then creating a branch is a good choice.
    Even for review purpose for your own concern and keep the existing code working you may want to make changes into 
    a separate branch.

Important Commands:

git remote  |    Show all remote locations for the repository
git remote add origin url |     Add a new remote location for the repository. Origin is the default name to use when you create only one remote location. Url should be the https url to the github repository.
git remove -v  |    Outputs the remote locations with verbose information (fetch and push urls)
git push origin master  |    Push the master branch to the remote location origin.
git pull origin master  |    Get the master branch from the remote location origin.
git pull origin master  |    = Git fetch origin + git merge master origin/master
git fetch origin  |    Get the changes from the remote location into the (hidden?) origin/master branch
