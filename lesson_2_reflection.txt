What happens when you initialize a repository? Why do you need to do it?
   When I initialized a repository a new repository is created and a .git file is created 
   which has important information regarding the structure of repository.
   When we have multiple files, it makes sense to keep them together alongwith their individual 
   changes. So a repository is a collection of dependent files which you want to have a snapshot 
   each time you commit.
    
How is the staging area different from the working directory and the repository?
What value do you think it offers?
   Staging area can be imagined as an intermediate form of future commit. When you 
   add files in the staging area, and then after working on the files only the changes in files in staging 
   area are reflected in the repository when you commit. The working dir is the physical place where all your 
   files are present.  A repository is a collection of dependent files which you want to have a snapshot 
   each time you commit.

How can you use the staging area to make sure you have one commit per logical
change?
   I would add only the files to the staging area which makes sense of having a logical commit.
   So when I commit I am sure it would be more meaningful.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
   I may want to try out some new feature or fix some bug but I may be uncertain that it would work.
   Creating branches would help me deal with this, further when I am sure I can merge the branches to master.
   Helping me to preserve my clean code at the same time allowing me to try out my adventure :D. 

How do the diagrams help you visualize the branch structure?
   Diagrams are very helpful to visualize the commit history and the state of the repository.
   You can avoid making terrible mistakes loosing important commits if you have a good idea of the state of the repository.
What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?
   Merging to branches results into a new commit which has all new changes of both branches if they didn't exist before 
   but if they were present before and not present in any of two branches then it is not reflected in the final commit.
   It represents and gives us idea about what would our repository look like after branches have been merged.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges
manually?
   Automatic merging is very convenient when the commits are very well organised but when there are conflicts,
   resolving them manually makes more sense.
